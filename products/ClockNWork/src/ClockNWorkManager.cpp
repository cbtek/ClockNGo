/*
    ClockNWorkManager.cpp
    
MIT License

Copyright (c) 2016 cbtek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//----------------------------------------
//ClockNWorkManager.cpp generated by cbtek on 11-13-2016 at 02:50:36 PM
//----------------------------------------

#include "ClockNWorkManager.h"

#include "utility/inc/FileUtils.hpp"
#include "utility/inc/XMLUtils.h"

using namespace cbtek::common::utility;

namespace cbtek {
namespace products {
namespace productivity {
namespace clock_n_work {

static const std::string c_EVENTS_FOLDER = "events/";
static const std::string c_EVENT_SEP = "<!%EVENT%!>";
static const std::string c_SETTINGS_SEP = "<!%SETTINGS%!>";

ClockNWorkManager ClockNWorkManager::m_instance = ClockNWorkManager();


ClockNWorkManager & ClockNWorkManager::inst()
{
    return m_instance;
}

void ClockNWorkManager::setSessionSSHPassword(const std::string &password)
{
    m_sshPassword=password;
}

std::string ClockNWorkManager::getSessionSSHPassword() const
{
    return m_sshPassword;
}

ClockNWorkManager::ClockNWorkManager()
{
    if (!FileUtils::isDirectory(c_EVENTS_FOLDER))
    {
        FileUtils::createDirectory("events");
    }
}

std::vector<ClockNWorkEvent> ClockNWorkManager::getEvents() const
{
    std::vector<std::string> entries,ext;
    std::vector<ClockNWorkEvent> events;
    ext.push_back(".cngevent");
    FileUtils::getFileEntries(c_EVENTS_FOLDER,true,ext,entries);
    for (const std::string & eventFile : entries)
    {
        events.push_back(getEvent(eventFile));
    }
    return events;
}

ClockNWorkEvent ClockNWorkManager::createEvent()
{
    ClockNWorkEvent event;
    event.setId(StringUtils::createUUID(false));
    return event;
}

ClockNWorkSettings ClockNWorkManager::getSettings() const
{
    std::string configFile = ".clocknwork_config";
    ClockNWorkSettings settings;
    if (FileUtils::fileExists(configFile))
    {
        std::string data = FileUtils::getFileContents(configFile);
        std::vector<std::string> configItems = StringUtils::split(data,"\n");
        StringUtils::clean(configItems);
        for(const std::string & item : configItems)
        {
            std::vector<std::string> splitItems = StringUtils::split(item,c_SETTINGS_SEP);
            StringUtils::clean(splitItems);
            if (splitItems.size() >1)
            {
                std::string key = splitItems[0];
                std::string value = splitItems[1];
                key = StringUtils::toUpper(key);
                if (key == "SSHHOST")
                {
                    settings.setSshRemoteHostName(value);
                }
                else if (key == "SSHDBHOST")
                {

                    settings.setSshRemoteDBHostName(value);
                }
                else if (key == "SSHDBPORT")
                {
                    settings.setSshRemoteDBPort(StringUtils::toInt(value));
                }
                else if (key == "SSHLOCALPORT")
                {

                    settings.setSshLocalDBPort(StringUtils::toInt(value));
                }
                else if (key == "SSHUSERNAME")
                {

                    settings.setSshUserName((value));
                }
                else if (key == "SSHFILENAME")
                {

                    settings.setRemoteFilename((value));
                }
            }
        }
    }
    return settings;
}

void ClockNWorkManager::writeSettings(const ClockNWorkSettings &settings)
{
    std::ostringstream out;
    out << "sshHost" <<c_SETTINGS_SEP<<settings.getSshRemoteHostName()<<std::endl;
    out << "sshDBHost" <<c_SETTINGS_SEP<<settings.getSshRemoteDBHostName()<<std::endl;
    out << "sshDBPort" <<c_SETTINGS_SEP<<settings.getSshRemoteDBPort()<<std::endl;
    out << "sshLocalDBPort" <<c_SETTINGS_SEP<<settings.getSshLocalDBPort()<<std::endl;
    out << "sshUsername" <<c_SETTINGS_SEP<<settings.getSshUserName()<<std::endl;
    out << "sshFilename" <<c_SETTINGS_SEP<<settings.getRemoteFilename()<<std::endl;
    FileUtils::writeFileContents(".clocknwork_config",out.str());
}

ClockNWorkEvent ClockNWorkManager::getEvent(const std::string &filename) const
{
    ClockNWorkEvent event;
    if (FileUtils::fileExists(filename))
    {
        std::string data = FileUtils::getFileContents(filename);
        std::vector<std::string> eventItems = StringUtils::split(data,"\n");
        StringUtils::clean(eventItems);
        for(const std::string & item : eventItems)
        {
            std::vector<std::string> splitItems = StringUtils::split(item,c_EVENT_SEP);
            StringUtils::clean(splitItems);
            if (splitItems.size() > 1)
            {
                std::string key = splitItems[0];
                std::string value = splitItems[1];

                if (key == "ID")
                {
                    event.setId(value);
                }
                else if (key == "START")
                {
                    event.setStartTime(StringUtils::toUInt(value));
                }
                else if (key == "END")
                {
                    event.setEndTime(StringUtils::toUInt(value));
                }
                else if (key == "EVENT")
                {
                    event.setEventType(static_cast<EventType>(StringUtils::toUInt(value)));
                }
                else if (key == "COMMENT")
                {
                    event.setComment(XMLUtils::getDecodedString(value));
                }
            }
        }
    }
    return event;
}

void ClockNWorkManager::writeEvent(const ClockNWorkEvent &event)
{
    std::ostringstream out;
    out << "ID" << c_EVENT_SEP << event.getId()<<std::endl;
    out << "START" << c_EVENT_SEP << event.getStartTime()<<std::endl;
    out << "END" << c_EVENT_SEP << event.getEndTime()<<std::endl;
    out << "EVENT" << c_EVENT_SEP << static_cast<std::uint64_t>(event.getEventType())<<std::endl;
    out << "COMMENT"<< c_EVENT_SEP << XMLUtils::getEncodedString(event.getComment()) <<std::endl;
    FileUtils::writeFileContents(c_EVENTS_FOLDER+event.getId()+".cngevent",out.str());
}

ClockNWorkManager::~ClockNWorkManager()
{

}





}}}}//end namespace


