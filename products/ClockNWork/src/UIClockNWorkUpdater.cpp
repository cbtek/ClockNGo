/*
    UIClockNWorkUpdater.cpp
    
MIT License

Copyright (c) 2016 cbtek

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/
//UIClockNWorkUpdater.cpp generated by cbtek on 11-12-2016 at 08:18:36 PM

#include "UIClockNWorkUpdater.h"
#include "ui_UIClockNWorkUpdater.h"

#include <QDialog>
#include <QDebug>
#include <QDesktopServices>
#include <QUrl>

#include "UIClockNWorkSettings.h"
#include "UIClockNWorkConfirm.h"

#include "ClockNWorkManager.h"
#include "ClockNWorkThread.h"

#include "utility/inc/FileUtils.hpp"
#include "utility/inc/DateTimeUtils.hpp"
#include "utility/inc/XMLUtils.h"
#include "utility/inc/XMLStreamWriter.h"
#include "utility/inc/SystemUtils.hpp"



using namespace cbtek::common::utility;
namespace cbtek {
namespace products {
namespace productivity {
namespace clock_n_work {


UIClockNWorkUpdater::UIClockNWorkUpdater(QWidget *parent) :
    QDialog(parent),
    m_ui(new Ui_UIClockNWorkUpdater)
{
    m_ui->setupUi(this);
    onLoadConfig();
    onSelectLast();
    connect(m_ui->m_btnArrive,SIGNAL(clicked(bool)),this,SLOT(onArriveEvent()));
    connect(m_ui->m_btnLeave,SIGNAL(clicked(bool)),this,SLOT(onLeaveEvent()));
    connect(m_ui->m_btnWork,SIGNAL(clicked(bool)),this,SLOT(onWorkEvent()));
    connect(m_ui->m_btnBreak,SIGNAL(clicked(bool)),this,SLOT(onBreakEvent()));
    connect(m_ui->m_btnMeet,SIGNAL(clicked(bool)),this,SLOT(onMeetingEvent()));
    connect(m_ui->m_btnSettings,SIGNAL(clicked(bool)),this,SLOT(onSettings()));
    connect(m_ui->m_btnExit,SIGNAL(clicked(bool)),this,SLOT(onClose()));
    connect(m_ui->m_btnView,SIGNAL(clicked(bool)),this,SLOT(onView()));
    connect(&m_updateTimer,SIGNAL(timeout()),this,SLOT(onUpdate()));
    m_updateTimer.start(30000);
    m_ui->m_lblStatus->setWordWrap(true);
}

UIClockNWorkUpdater::~UIClockNWorkUpdater()
{
    delete m_ui;
}

void UIClockNWorkUpdater::onSelectLast()
{
    std::vector<ClockNWorkEvent> items = ClockNWorkManager::inst().getEvents();
    for (const ClockNWorkEvent & event : items)
    {
        if(event.getEndTime()  == 0)
        {
            m_current = event;
        }
    }
}

void UIClockNWorkUpdater::onLoadConfig()
{
    m_settings = ClockNWorkManager::inst().getSettings();
}

void UIClockNWorkUpdater::onWorkEvent()
{
    onConfirm(EventType::WORK, "imgWork.png");
}

void UIClockNWorkUpdater::onArriveEvent()
{
    onConfirm(EventType::ARRIVE, "imgArrive.png");
}

void UIClockNWorkUpdater::onLeaveEvent()
{
    onConfirm(EventType::LEAVE, "imgLeave.png");
}

void UIClockNWorkUpdater::onMeetingEvent()
{
    onConfirm(EventType::MEETING, "imgMeeting.png");
}

void UIClockNWorkUpdater::onBreakEvent()
{
    onConfirm(EventType::BREAK, "imgBreak.png");
}

void UIClockNWorkUpdater::onGenerateHTML()
{
    std::vector<ClockNWorkEvent> events = ClockNWorkManager::inst().getEvents();
    std::map<int,std::map<std::uint64_t,ClockNWorkEvent> > eventMap;


    std::ostringstream out;
    XMLStreamWriter xml(out);
    xml.writeStartElementNoAttributes("HTML");
    xml.writeStartElementNoAttributes("HEAD");
    xml.writeStartElementNoAttributes("TITLE");
    xml.writeData("Corey Status");
    xml.writeEndElement("TITLE");
    xml.writeStartElement("LINK");
    xml.writeAttribute("rel","stylesheet");
    xml.writeAttribute("type","text/css");
    xml.writeAttribute("href","css/style.css",true);
    //xml.writeStartElement("meta");
    //xml.writeAttribute("http-equiv","refresh");
    //xml.writeAttribute("content","60",true);
    xml.writeStartElement("script");
    xml.writeAttribute("type","text/javascript",true);
    xml.writeData
            (
                ""
               "function refreshPage ()"
               "{"
                   "var page_y = document.getElementsByTagName(\"body\")[0].scrollTop;"
                  " window.location.href = window.location.href.split('?')[0] + '?page_y=' + page_y;"
               "}"

               "window.onload = function ()"
               "{"
                   "setTimeout(refreshPage, 60000);"
                   "if ( window.location.href.indexOf('page_y') != -1 )"
                   "{"
                      " var match = window.location.href.split('?')[1].split(\"&\")[0].split(\"=\");"
                       "document.getElementsByTagName(\"body\")[0].scrollTop = match[1];"
                   "}"
               "}"
            );
    xml.writeEndElement("script");

    xml.writeEndElement("HEAD");
    xml.writeStartElementNoAttributes("BODY");

    for (const ClockNWorkEvent & event : events)
    {
        QDateTime dtStart;
        QDateTime dtEnd;
        dtStart.setMSecsSinceEpoch(event.getStartTime());
        dtEnd.setMSecsSinceEpoch(event.getEndTime());
        QDate date = dtStart.date();
        DateEntity dateEntity(date.month(),
                              date.day(),
                              date.year());

        eventMap[dateEntity.toDateInteger()][event.getStartTime()] = event;
    }

    auto itBeg = eventMap.rbegin();
    auto itEnd = eventMap.rend();
    while (itBeg != itEnd)
    {
        auto itEventBeg = itBeg->second.begin();
        auto itEventEnd = itBeg->second.end();
        int date = itBeg->first;
        DateEntity entity(date);
        std::string dateStr = StringUtils::toString(entity.getMonth())+"-"+StringUtils::toString(entity.getDay());
        std::string totalTimeStr;
        std::uint64_t totalMS=0;
        xml.writeStartElementNoAttributes("TABLE");

        xml.writeStartElementNoAttributes("TR");
        xml.writeStartElement("TH");
        xml.writeAttribute("style","width:96px;background:white;color:black;border-radius-top:8px; padding:8px;padding-top:12px;text-align:center;vertical-align:center;",true);
        xml.writeStartElementNoAttributes("H1");
        xml.writeData(dateStr);
        xml.writeEndElement("H1");

        xml.writeEndElement("TH");
        xml.writeEndElement("TR");

        xml.writeStartElementNoAttributes("TR");
        xml.writeStartElement("TH");
        xml.writeAttribute("style","width:96px;",true);
        xml.writeData("Event Type");
        xml.writeEndElement("TH");

        xml.writeStartElementNoAttributes("TH");
        xml.writeData("Event Comment");
        xml.writeEndElement("TH");

        xml.writeStartElement("TH");
        xml.writeAttribute("style","width:96px;",true);
        xml.writeData("Start Time");
        xml.writeEndElement("TH");

        xml.writeStartElement("TH");
        xml.writeAttribute("style","width:96px;",true);
        xml.writeData("End Time");
        xml.writeEndElement("TH");

        xml.writeStartElement("TH");
        xml.writeAttribute("style","width:128px;",true);
        xml.writeData("Elapsed Time");
        xml.writeEndElement("TH");
        xml.writeEndElement("TR");


        while (itEventBeg != itEventEnd)
        {
            ClockNWorkEvent event = itEventBeg->second;
            std::string eventStr;
            switch(event.getEventType())
            {
                case EventType::ARRIVE:eventStr="Arrive";break;
                case EventType::WORK:eventStr="Work";break;
                case EventType::BREAK:eventStr="Break";break;
                case EventType::MEETING:eventStr="Meeting";break;
                case EventType::LEAVE:eventStr="Leave";break;
                default:break;
            }

            xml.writeStartElementNoAttributes("TR");

            xml.writeStartElementNoAttributes("TD style='text-align:center;'");
            std::string image = "images/img"+eventStr+".png";
            xml.writeStartElement("img");
            xml.writeAttribute("src",image);
            xml.writeEndElement();
            //xml.writeData(eventStr);
            xml.writeEndElement("TD");

            xml.writeStartElement("TD");
            xml.writeAttribute("style","white-space: normal;",true);
            xml.writeStartElementNoAttributes("P");
            std::string comment = event.getComment();
            comment = XMLUtils::getDecodedString(comment);
            xml.writeData(comment);
            xml.writeEndElement("P");
            xml.writeEndElement("TD");

            QDateTime dtStart;
            QDateTime dtEnd;
            dtStart.setMSecsSinceEpoch(event.getStartTime());
            dtEnd.setMSecsSinceEpoch(event.getEndTime());
            if (event.getEventType() == EventType::LEAVE)
            {
                xml.writeStartElementNoAttributes("TD");
                xml.writeData(dtStart.time().toString("h:mm AP").toStdString());
                xml.writeEndElement("TD");
                xml.writeStartElementNoAttributes("TD");
                xml.writeData(dtStart.time().toString("h:mm AP").toStdString());
                xml.writeEndElement("TD");
            }
            else
            {
                xml.writeStartElementNoAttributes("TD");
                xml.writeData(dtStart.time().toString("h:mm AP").toStdString());
                xml.writeEndElement("TD");

                xml.writeStartElementNoAttributes("TD");
                if (event.getEndTime() == 0)
                {
                    xml.writeData("Pending...");
                }
                else xml.writeData(dtEnd.time().toString("h:mm AP").toStdString());
                xml.writeEndElement("TD");
            }

            xml.writeStartElementNoAttributes("TD");
            if (event.getEventType() != EventType::LEAVE)
            {
                QTime tm;
                std::uint64_t start = event.getStartTime();
                std::uint64_t end = event.getEndTime();


                if (end == 0)
                {
                    end = TimeUtils::getMillisecondsNow();
                }
                int range = end - start;
                totalMS+=range;
                int x = range / 1000;
                int seconds = x % 60;
                x /= 60;
                int minutes = x % 60;
                x /= 60;
                int hours = x % 24;
                x /= 24;
                int days = x;
                std::ostringstream outXML;

                outXML << (hours<10?"0":"")   << hours<<":"
                       << (minutes<10?"0":"") << minutes<<":"
                       << (seconds<10?"0":"") << seconds;

                xml.writeData(outXML.str());

            }
            else
            {
                xml.writeData("End of Work Day");
            }

            xml.writeEndElement("TD");
            xml.writeEndElement("TR");
            ++itEventBeg;
        }
        ++itBeg;


        int x = totalMS / 1000;
        int seconds = x % 60;
        x /= 60;
        int minutes = x % 60;
        x /= 60;
        int hours = x % 24;
        x /= 24;
        int days = x;

        std::ostringstream outTimeStr;
        outTimeStr << (hours<10?"0":"")   << hours<<":"
                   << (minutes<10?"0":"") << minutes<<":"
                   << (seconds<10?"0":"") << seconds;
        totalTimeStr = outTimeStr.str();
        xml.writeStartElementNoAttributes("TR");
        xml.writeStartElementNoAttributes("TD");
       xml.writeStartElementNoAttributes("H2");
        xml.writeData("Total:");
        xml.writeEndElement("H2");
        xml.writeEndElement("TD");
        xml.writeStartElementNoAttributes("TD");
        xml.writeStartElementNoAttributes("H2");
        xml.writeData(totalTimeStr);
        xml.writeEndElement("H2");
        xml.writeEndElement("TD");
        xml.writeEndElement("TR");
        xml.writeEndElement("TABLE");
        xml.writeData("<BR><BR><BR><BR>");
    }
    xml.writeStartElement("DIV");
    xml.writeAttribute("class","footer");
    xml.writeStartElement("P");
    xml.writeAttribute("style","text-align:center;color:white;",true);
    xml.writeData("Created by C.Berry @ cbtek.net 2016");
    xml.writeEndElement("P");

    xml.writeEndElement("DIV");
    xml.writeEndElement("BODY");
    xml.writeEndElement("HTML");
    FileUtils::writeFileContents("status.htm",out.str());
}

void UIClockNWorkUpdater::onUploadFile()
{
    m_ui->m_lblStatus->show();
    std::string user = m_settings.getSshUserName();
    std::string pass = ClockNWorkManager::inst().getSessionSSHPassword();
    std::string url = m_settings.getRemoteFilename();

    if (pass.empty())
    {
        m_ui->m_lblStatus->setText("<font style='color:#FFAAAA;font-size:18px;'>SSH Password not set</font>");
        return;
    }
    else if (user.empty())
    {
        m_ui->m_lblStatus->setText("<font style='color:#FFAAAA;font-size:18px;'>Username invalid</font>");
        return;
    }
    else if (url.empty())
    {
        m_ui->m_lblStatus->setText("<font style='color:#FFAAAA;font-size:18px;'>Empty URL Error</font>");
        return;
    }
    else
    {
        m_ui->m_lblStatus->setText("<font style='color:#FFFFAA;font-size:18px;'>Waiting for connection...</font>");
    }

    ClockNWorkThread * upload = new ClockNWorkThread(m_settings);
    connect(upload,SIGNAL(failed(QString)),this,SLOT(onUploadFailed(QString)));
    connect(upload,SIGNAL(success()),this,SLOT(onUploadSuccess()));
    upload->start();
}

void UIClockNWorkUpdater::onConfirm(EventType type, QString iconFile)
{
    QIcon icon (":/cbtek/products/productivity/clock_n_work/"+iconFile);
    UIClockNWorkConfirm confirm(icon,type);
    this->hide();
    connect(&confirm,SIGNAL(accepted(EventType, QString)),this,SLOT(onConfirmAccepted(EventType,QString)));
    confirm.exec();
    this->show();
}

void UIClockNWorkUpdater::onConfirmAccepted(EventType eventType, const QString &comment)
{
    // Create new Event
    ClockNWorkEvent event = ClockNWorkManager::inst().createEvent();
    std::uint64_t startTime = TimeUtils::getMillisecondsNow();
    std::uint64_t endTime = 0;
    std::string commentStr = comment.toStdString();
    event.setComment(commentStr);
    event.setStartTime(startTime);
    event.setEndTime(endTime);
    event.setEventType(eventType);

    if (m_current.getEventType() != EventType::NONE)
    {
        // Update end time on last event
        m_current.setEndTime(startTime);
        ClockNWorkManager::inst().writeEvent(m_current);
    }

    // set current to new event
    m_current = event;

    //Update
    ClockNWorkManager::inst().writeEvent(event);

    //Generate HTML
    onGenerateHTML();

    //Upload file to server
    onUploadFile();
}

void UIClockNWorkUpdater::onSettings()
{
    this->hide();
    UIClockNWorkSettings settings;
    settings.exec();
    onLoadConfig();
    this->show();
    //Generate HTML
    onGenerateHTML();

    //Upload file to server
    onUploadFile();
}

void UIClockNWorkUpdater::onView()
{
    //Open url
    QDesktopServices::openUrl(QUrl("https://www.cbtek.net/cberry/status.htm"));
}

void UIClockNWorkUpdater::onClose()
{
    this->close();
}

void UIClockNWorkUpdater::onUpdate()
{
    //Generate HTML
    onGenerateHTML();

    //Upload file to server
    onUploadFile();
}

void UIClockNWorkUpdater::onUploadFailed(const QString & err)
{
    m_ui->m_lblStatus->setText("<font style='color:#FFAAAA;font-size:18px;'>"+err+"</font>");
}

void UIClockNWorkUpdater::onUploadSuccess()
{

    m_ui->m_lblStatus->setText("<font style='color:#AAFFAA;font-size:18px;'>Successful upload</font>");
}

}}}}//end namespace

